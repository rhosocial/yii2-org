<?php
/**
 * Created by PhpStorm.
 * User: i
 * Date: 2017/4/11
 * Time: 10:54
 */

namespace rhosocial\organization\tests\org;

use rhosocial\organization\tests\data\ar\org\Organization;
use rhosocial\organization\tests\data\ar\org\OrganizationLimit;
use rhosocial\organization\tests\data\ar\profile\Profile;
use rhosocial\organization\tests\data\ar\user\User;
use rhosocial\organization\tests\TestCase;
use rhosocial\organization\rbac\permissions\SetUpOrganization;
use Yii;

/**
 * Class OrganizationLimitTest
 * @package rhosocial\organization\tests\org
 * @version 1.0
 * @author vistart <i@vistart.me>
 */
class OrganizationLimitTest extends TestCase
{
    /**
     * @var User
     */
    protected $user;
    /**
     * @var Organization;
     */
    protected $organization;
    protected function setUp()
    {
        parent::setUp();
        $this->user = new User(['password' => '123456']);
        $this->assertTrue($this->user->register([$this->user->createProfile(['nickname' => 'vistart'])]));
        $this->assertNotNull(Yii::$app->authManager->assign((new SetUpOrganization)->name, $this->user));

    }
    protected function tearDown()
    {
        $this->assertTrue($this->user->deregister());
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @group organization
     * @group setup
     * @group limit
     */
    public function testNormal()
    {
        $limit = OrganizationLimit::find()->createdBy($this->user)->one();
        $this->assertNull($limit);

        $limit = OrganizationLimit::getLimit($this->user);
        $this->assertEquals((OrganizationLimit::buildNoInitModel())->defaultLimit, $limit);

        $limit = OrganizationLimit::find()->createdBy($this->user)->one();
        /* @var $limit OrganizationLimit */
        $this->assertInstanceOf(OrganizationLimit::class, $limit);
        $this->assertEquals($limit->defaultLimit, $limit->limit);
        $this->assertFalse($this->user->hasReachedOrganizationLimit());

        $this->organization = $this->user->setUpOrganization($this->faker->name);
        $this->assertTrue($this->organization);
        $this->assertEquals(1, (int)$this->user->getCreatorsAtOrganizations()->andWhere(['type' => Organization::TYPE_ORGANIZATION])->count());
        $limit = OrganizationLimit::getLimit($this->user);
        $this->assertEquals((OrganizationLimit::buildNoInitModel())->defaultLimit, $limit);
        $this->assertFalse($this->user->hasReachedOrganizationLimit());
    }
}