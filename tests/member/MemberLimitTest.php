<?php

/**
 *  _   __ __ _____ _____ ___  ____  _____
 * | | / // // ___//_  _//   ||  __||_   _|
 * | |/ // /(__  )  / / / /| || |     | |
 * |___//_//____/  /_/ /_/ |_||_|     |_|
 * @link https://vistart.me/
 * @copyright Copyright (c) 2016 - 2017 vistart
 * @license https://vistart.me/license/
 */

namespace rhosocial\organization\tests\member;

use rhosocial\organization\rbac\permissions\SetUpOrganization;
use rhosocial\organization\tests\data\ar\user\User;
use rhosocial\organization\tests\data\ar\org\Organization;
use rhosocial\organization\tests\TestCase;
use Yii;

/**
 * Class MemberLimitTest
 * @package rhosocial\organization\tests\member
 * @version 1.0
 * @author vistart <i@vistart.me>
 */
class MemberLimitTest extends TestCase
{
    /**
     * @var User
     */
    protected $user;
    /**
     * @var User[]
     */
    protected $users;
    /**
     * @var Organization
     */
    protected $organization;
    public $limit = 10;
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = new User(['password' => '123456']);
        $this->assertTrue($this->user->register([$this->user->createProfile(['nickname' => $this->faker->name])]));
        $this->assertNotNull(Yii::$app->authManager->assign((new SetUpOrganization)->name, $this->user));
        $this->assertTrue($this->user->setUpOrganization($this->faker->name));
        $this->organization = $this->user->lastSetUpOrganization;

        for ($i = 0; $i < $this->limit - 2; $i++)
        {
            $this->users[$i] = new User(['password' => '123456']);
            $this->assertTrue($this->users[$i]->register([$this->users[$i]->createProfile(['nickname' => $this->faker->name])]));

            $member = $this->users[$i];
            $this->assertTrue($this->organization->addMember($member));
        }
        for ($i = $this->limit - 2; $i < $this->limit; $i++)
        {
            $this->users[$i] = new User(['password' => '123456']);
            $this->assertTrue($this->users[$i]->register([$this->users[$i]->createProfile(['nickname' => $this->faker->name])]));
        }
        $memberLimit = $this->organization->memberLimit;
        $memberLimit->limit = $this->limit;
        $this->assertTrue($memberLimit->save());
    }

    protected function tearDown()
    {
        if ($this->organization) {
            $this->assertTrue($this->user->revokeOrganization($this->organization));
        }
        Organization::deleteAll();
        if ($this->user) {
            $this->assertTrue($this->user->deregister());
        }
        foreach ($this->users as $user)
        {
            $this->assertTrue($user->deregister());
        }
        User::deleteAll();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @group user
     * @group member
     * @group setup
     * @group limit
     */
    public function testNormal()
    {
        $this->assertFalse($this->organization->hasReachedMemberLimit());
        $member = $this->users[8];
        $this->assertTrue($this->organization->addMember($member));
        $this->assertTrue($this->organization->hasReachedMemberLimit());
        $this->assertFalse($this->organization->addMember($member));
        $this->assertTrue($this->organization->hasReachedMemberLimit());
    }
}
