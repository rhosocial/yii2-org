<?php

/**
 *  _   __ __ _____ _____ ___  ____  _____
 * | | / // // ___//_  _//   ||  __||_   _|
 * | |/ // /(__  )  / / / /| || |     | |
 * |___//_//____/  /_/ /_/ |_||_|     |_|
 * @link https://vistart.me/
 * @copyright Copyright (c) 2016 - 2017 vistart
 * @license https://vistart.me/license/
 */

namespace rhosocial\organization\tests\member;

use rhosocial\organization\rbac\permissions\SetUpOrganization;
use rhosocial\organization\tests\data\ar\org\Organization;
use rhosocial\organization\tests\data\ar\user\User;
use rhosocial\organization\tests\TestCase;
use Yii;

/**
 * Class MemberRoleTest
 * @package rhosocial\organization\tests\member
 * @version 1.0
 * @author vistart <i@vistart.me>
 */
class MemberRoleTest extends TestCase
{
    /**
     * @var User
     */
    protected $user;
    /**
     * @var User[]
     */
    protected $users;
    /**
     * @var Organization
     */
    protected $organization;
    /**
     * @var Organization
     */
    protected $department;
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = new User(['password' => '123456']);
        $this->assertTrue($this->user->register([$this->user->createProfile(['nickname' => $this->faker->name])]));
        $this->assertNotNull(Yii::$app->authManager->assign((new SetUpOrganization)->name, $this->user));

        $this->assertTrue($this->user->setUpOrganization($this->faker->name));
        $this->organization = $this->user->lastSetUpOrganization;
        $this->assertInstanceOf(Organization::class, $this->organization);

        for ($i = 0; $i < 10; $i++) {
            $this->users[$i] = new User(['password' => '123456']);
            $this->assertTrue($this->users[$i]->register([$this->users[$i]->createProfile(['nickname' => $this->faker->name])]));
        }
    }
    protected function tearDown()
    {
        if (!$this->organization) {
            $this->assertTrue($this->user->revokeOrganization($this->organization));
        }
        Organization::deleteAll();
        foreach ($this->users as $user) {
            if ($user) {
                $this->assertTrue($user->deregister());
            }
        }
        if (!$this->user) {
            $this->assertTrue($this->user->deregister());
        }
        User::deleteAll();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @group role
     * @group member
     */
    public function testCreator()
    {
        $this->assertEquals($this->user->getGUID(), $this->organization->creator->getGUID());

        unset($this->user->atOrganizations);
        $orgs = $this->user->atOrganizations;
        $this->assertCount(1, $orgs);
        $this->assertEquals($this->organization->getGUID(), $orgs[0]->getGUID());
        $members = $this->user->ofMembers;
        $this->assertCount(1, $members);
        $this->assertEquals($this->user->getGUID(), $members[0]->memberUser->getGUID());

        $orgs = $this->user->atOrganizationsOnly;
        $this->assertCount(1, $orgs);
        $this->assertEquals($this->organization->getGUID(), $orgs[0]->getGUID());

        $orgs = $this->user->atDepartmentsOnly;
        $this->assertCount(0, $orgs);

        $orgs = $this->user->creatorsAtOrganizations;
        $this->assertCount(1, $orgs);
        $this->assertEquals($this->organization->getGUID(), $orgs[0]->getGUID());
        $members = $this->user->ofCreators;
        $this->assertCount(1, $members);
        $this->assertEquals($this->user->getGUID(), $members[0]->memberUser->getGUID());

        $orgs = $this->user->creatorsAtOrganizationsOnly;
        $this->assertCount(1, $orgs);
        $this->assertEquals($this->organization->getGUID(), $orgs[0]->getGUID());

        $orgs = $this->user->administratorsAtOrganizations;
        $this->assertCount(0, $orgs);
        $members = $this->user->ofAdministrators;
        $this->assertCount(0, $members);

        $orgs = $this->user->administratorsAtOrganizationsOnly;
        $this->assertCount(0, $orgs);
    }

    /**
     * @group role
     * @group member
     */
    public function testOneAdministrator()
    {
        $this->assertEquals($this->user->getGUID(), $this->organization->creator->getGUID());

        $member = $this->users[0];
        $this->assertTrue($this->organization->addMember($member));

        $this->assertNotEquals($this->users[0]->getGUID(), $this->organization->creator->getGUID());

        unset($this->users[0]->atOrganizations);
        $orgs = $this->users[0]->atOrganizations;
        $this->assertCount(1, $orgs);
        $this->assertEquals($this->organization->getGUID(), $orgs[0]->getGUID());
        $members = $this->users[0]->ofMembers;
        $this->assertCount(1, $members);
        $this->assertEquals($this->users[0]->getGUID(), $members[0]->memberUser->getGUID());

        $orgs = $this->users[0]->atOrganizationsOnly;
        $this->assertCount(1, $orgs);
        $this->assertEquals($this->organization->getGUID(), $orgs[0]->getGUID());

        $orgs = $this->users[0]->administratorsAtOrganizations;
        $this->assertCount(0, $orgs);

        $orgs = $this->users[0]->administratorsAtOrganizationsOnly;
        $this->assertCount(0, $orgs);

        $member = $this->users[0];
        $this->assertTrue($this->organization->addAdministrator($member));
        $admins = $this->organization->administrators;
        $this->assertCount(1, $admins);
        $this->assertEquals($this->users[0]->getGUID(), $admins[0]->getGUID());

        unset($this->users[0]->administratorsAtOrganizations);
        $orgs = $this->users[0]->administratorsAtOrganizations;
        $this->assertCount(1, $orgs);
        $this->assertEquals($this->organization->getGUID(), $orgs[0]->getGUID());

        unset($this->users[0]->administratorsAtOrganizationsOnly);
        $orgs = $this->users[0]->administratorsAtOrganizationsOnly;
        $this->assertCount(1, $orgs);
        $this->assertEquals($this->organization->getGUID(), $orgs[0]->getGUID());

        $orgs = $this->users[0]->creatorsAtOrganizations;
        $this->assertCount(0, $orgs);

        $orgs = $this->users[0]->creatorsAtOrganizationsOnly;
        $this->assertCount(0, $orgs);
    }
}
